name: Build and Publish Containers

on:
  release:
    types: [published]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      container: ${{ steps.extract.outputs.container }}
      revision: ${{ steps.extract.outputs.revision }}
      matrix: ${{ steps.versions.outputs.matrix }}
      context: ${{ steps.versions.outputs.context }}
      variant: ${{ steps.extract.outputs.variant }}
    steps:
      - name: Extract container, variant and revision
        id: extract
        run: |
          TAG=${{ github.event.release.tag_name }}
          IFS='-' read -ra parts <<< "$TAG"
          CONTAINER=${parts[0]}
          if [ ${#parts[@]} -eq 2 ]; then
            VARIANT=""
            REVISION=${parts[1]}
          else
            VARIANT=${parts[1]}
            REVISION=${parts[2]}
          fi
          echo "container=$CONTAINER" >> $GITHUB_OUTPUT
          echo "variant=$VARIANT" >> $GITHUB_OUTPUT
          echo "revision=$REVISION" >> $GITHUB_OUTPUT

      - name: Set matrix and context
        id: versions
        run: |
          CONTAINER=${{ steps.extract.outputs.container }}
          VARIANT=${{ steps.extract.outputs.variant }}
          if [ "$CONTAINER" = "postgresql" ]; then
            MATRIX='[{"version": "13.22", "postgresql_version": "13.22", "citus_version": "11.3.1", "patroni_version": "v3.0.2"}]'
            CONTEXT="docker/postgresql"
          elif [ "$CONTAINER" = "wordpress" ]; then
            if [ "$VARIANT" = "apache" ]; then
              MATRIX='[{"version": "6.8.3", "wordpress_version": "6.8.3"}]'
              CONTEXT="docker/wordpress/apache"
            else
              MATRIX='[{"version": "latest"}]'
              CONTEXT="docker/wordpress/$VARIANT"
            fi
          elif [ "$CONTAINER" = "mariadb" ]; then
            MATRIX='[{"version": "11.8.3", "mariadb_version": "11.8.3"}]'
            CONTEXT="docker/mariadb"
          else
            MATRIX='[{"version": "latest"}]'
            CONTEXT="docker/$CONTAINER"
          fi
          echo "matrix=$(echo $MATRIX | jq -c .)" >> $GITHUB_OUTPUT
          echo "context=$CONTEXT" >> $GITHUB_OUTPUT

  build:
    needs: setup
    if: github.event.release.target_commitish == 'main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set image tag
        id: tag
        run: |
          VERSION=${{ matrix.version }}
          VARIANT=${{ needs.setup.outputs.variant }}
          REVISION=${{ needs.setup.outputs.revision }}
          if [ -n "$VARIANT" ]; then
            TAG="$VERSION-$VARIANT-$REVISION"
          else
            TAG="$VERSION-$REVISION"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GCR_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ needs.setup.outputs.context }}
          push: true
          build-args: |
            ${{ matrix.postgresql_version && format('POSTGRESQL_VERSION={0}', matrix.postgresql_version) || '' }}
            ${{ matrix.citus_version && format('CITUS_VERSION={0}', matrix.citus_version) || '' }}
            ${{ matrix.patroni_version && format('PATRONI_VERSION={0}', matrix.patroni_version) || '' }}
            ${{ matrix.wordpress_version && format('WORDPRESS_VERSION={0}', matrix.wordpress_version) || '' }}
            ${{ matrix.php_version && format('PHP_VERSION={0}', matrix.php_version) || '' }}
            ${{ matrix.mariadb_version && format('MARIADB_VERSION={0}', matrix.mariadb_version) || '' }}
          tags: ghcr.io/${{ github.repository_owner }}/containers/${{ needs.setup.outputs.container }}:${{ steps.tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max